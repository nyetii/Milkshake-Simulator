// <auto-generated />
using System;
using Kimi.Services.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Kimi.Core.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Kimi.Services.Models.Servers", b =>
                {
                    b.Property<decimal>("Id")
                        .HasColumnType("decimal(20,0)");

                    b.Property<Guid?>("MilkshakeContextId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MilkshakeContextId");

                    b.ToTable("Servers");
                });

            modelBuilder.Entity("Milkshake.Models.Instance", b =>
                {
                    b.Property<Guid>("ContextId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Vips")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ContextId");

                    b.ToTable("Instance");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Instance");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Milkshake.Models.Source", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Creator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<int>("Height")
                        .HasColumnType("int");

                    b.Property<Guid>("MilkshakeContextId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Tags")
                        .HasColumnType("int");

                    b.Property<int>("TimesUsed")
                        .HasColumnType("int");

                    b.Property<int>("Width")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MilkshakeContextId");

                    b.ToTable("Source");
                });

            modelBuilder.Entity("Milkshake.Models.Template", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Creator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<int>("Height")
                        .HasColumnType("int");

                    b.Property<Guid>("MilkshakeContextId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Tags")
                        .HasColumnType("int");

                    b.Property<int>("TimesUsed")
                        .HasColumnType("int");

                    b.Property<int>("Width")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MilkshakeContextId");

                    b.ToTable("Template");
                });

            modelBuilder.Entity("Milkshake.Models.Topping", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<int>("Filter")
                        .HasColumnType("int");

                    b.Property<string>("Font")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Height")
                        .HasColumnType("int");

                    b.Property<int>("Index")
                        .HasColumnType("int");

                    b.Property<bool>("IsText")
                        .HasColumnType("bit");

                    b.Property<int>("Layer")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<int>("Orientation")
                        .HasColumnType("int");

                    b.Property<string>("StrokeColor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StrokeWidth")
                        .HasColumnType("int");

                    b.Property<int>("Tags")
                        .HasColumnType("int");

                    b.Property<Guid>("TemplateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Width")
                        .HasColumnType("int");

                    b.Property<int>("X")
                        .HasColumnType("int");

                    b.Property<int>("Y")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TemplateId");

                    b.ToTable("TemplateProperties");
                });

            modelBuilder.Entity("Kimi.Services.Models.MilkshakeInstance", b =>
                {
                    b.HasBaseType("Milkshake.Models.Instance");

                    b.HasDiscriminator().HasValue("MilkshakeInstance");
                });

            modelBuilder.Entity("Kimi.Services.Models.Servers", b =>
                {
                    b.HasOne("Kimi.Services.Models.MilkshakeInstance", "Milkshake")
                        .WithMany("Servers")
                        .HasForeignKey("MilkshakeContextId");

                    b.Navigation("Milkshake");
                });

            modelBuilder.Entity("Milkshake.Models.Source", b =>
                {
                    b.HasOne("Milkshake.Models.Instance", "Milkshake")
                        .WithMany("Source")
                        .HasForeignKey("MilkshakeContextId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Milkshake");
                });

            modelBuilder.Entity("Milkshake.Models.Template", b =>
                {
                    b.HasOne("Milkshake.Models.Instance", "Milkshake")
                        .WithMany("Template")
                        .HasForeignKey("MilkshakeContextId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Milkshake");
                });

            modelBuilder.Entity("Milkshake.Models.Topping", b =>
                {
                    b.HasOne("Milkshake.Models.Template", "Template")
                        .WithMany("Toppings")
                        .HasForeignKey("TemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Template");
                });

            modelBuilder.Entity("Milkshake.Models.Instance", b =>
                {
                    b.Navigation("Source");

                    b.Navigation("Template");
                });

            modelBuilder.Entity("Milkshake.Models.Template", b =>
                {
                    b.Navigation("Toppings");
                });

            modelBuilder.Entity("Kimi.Services.Models.MilkshakeInstance", b =>
                {
                    b.Navigation("Servers");
                });
#pragma warning restore 612, 618
        }
    }
}
